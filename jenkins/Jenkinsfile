#!groovy
import hudson.*;

node {
//    agent any
    parameters {
//        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')
        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')
        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    }
    // Get all Causes for the current build
    def causes = currentBuild.getBuildCauses()

    // Get a specific Cause type (in this case the user who kicked off the build),
    // if present.
    def specificCause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')

    // First we'll generate a text file in a subdirectory on one node and stash it.
    stage "first step on first node"

    
    stage('first-node') {
        print 'first stage test'
        print 'causes ${causes}'
        sh "ls -la"
        print 'first stage test finished'
        echo "Hello ${params.PERSON}"
        echo "Biography: ${params.BIOGRAPHY}"
        echo "Toggle: ${params.TOGGLE}"
        echo "Choice: ${params.CHOICE}"
        echo "Password: ${params.PASSWORD}"
    }

   stage('Test Username/Password') {
        environment {
           SERVICE_CREDS = credentials('my-predefined-username-password')
        }
        sh 'echo "Service user is $SERVICE_CREDS_USR"'
        sh 'echo "Service password is $SERVICE_CREDS_PSW"'
    //    sh 'curl -u $SERVICE_CREDS https://myservice.example.com'
        parameters { string(name: 'DEPLOY_ENV', defaultValue: 'staging', description: '') }
       
   }
   stage('Test SSH Username with private key') {
        environment {
            SSH_CREDS = credentials('my-predefined-ssh-creds')
        }
        sh 'echo "SSH private key is located at $SSH_CREDS"'
        sh 'echo "SSH user is $SSH_CREDS_USR"'
        sh 'echo "SSH passphrase is $SSH_CREDS_PSW"'
   }

    stage('second-node') {
        print 'second stage test'
        try {
            sh "rm -rf jpasamplehsqldb"
        } catch (Exception e) {
                echo 'Exception occurred: ' + e.toString()
        }    
        sh "git clone https://github.com/sureshbenedy/jpasamplehsqldb.git"
        sh "cd jpasamplehsqldb ; pwd ; mvn clean install"
        print 'specificCause ${specificCause}'
        print 'second stage test finished'
    }
    
}
